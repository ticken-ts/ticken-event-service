#
# Copyright SecureKey Technologies Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
#
# Default GO SDK Configuration
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "ticken-network"

#
# Describe what the target network is/does.
#
description: "The network description"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: 1.0.0

#
# The client section used by GO SDK.
#
client:
  # Which organization does this application instance belong to? The value must be the name of an org
  # defined under "organizations"
  organization: org1

  logging:
    level: info

  # Needed to load users crypto keys and certs.
  cryptoconfig:
    path: /Users/facundotorraca/Documents/ticken/ticken-dev/test-pvtbc/test-network/organizations

  # Some SDKs support pluggable KV stores, the properties under "credentialStore"
  # are implementation specific
  # credentialStore:
    # [Optional]. Used by user store. Not needed if all credentials are embedded in configuration
    # and enrollments are performed elswhere.
    # path: unused/by/sdk/go

    # [Optional]. Specific to the CryptoSuite implementation used by GO SDK. Software-based implementations
    # requiring a key store. PKCS#11 based implementations does not.
    cryptoStore:
      # Specific to the underlying KeyValueStore that backs the crypto key store.
      # path: /usually/it/is/tmp/msp

  # BCCSP config for the client. Used by GO SDK.
  BCCSP:
    security:
      enabled: true
      default:
        provider: "SW"
      hashAlgorithm: "SHA2"
      softVerify: true
      level: 256

  tlsCerts:
    # [Optional]. Use system certificate pool when connecting to peers, orderers (for negotiating TLS) Default: false
    systemCertPool: true

    # [Optional]. Client key and cert for TLS handshake with peers and orderers

# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:

  # name of the channel
  ticken-channel:

    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    # deprecated: not recommended, to override any orderer configuration items, entity matchers should be used.
    orderers:
      - orderer.example.com

    # Required. list of peers from participating orgs
    peers:
      peer0.org1.example.com:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

      # [Optional]. The application can use these options to perform channel operations like retrieving channel  config etc.
      policies:
        # [Optional] options for retrieving channel configuration blocks
        queryChannelConfig:
          # [Optional] min number of success responses (from targets/peers)
          minResponses: 1

          # [Optional] channel config will be retrieved for these number of random targets
          maxTargets: 1

          # [Optional] retry options for query config block
          retryOpts:

            # [Optional] number of retry attempts
            attempts: 5

            # [Optional] the back off interval for the first retry attempt
            initialBackoff: 500ms

            # [Optional] the maximum back off interval for any retry attempt
            maxBackoff: 5s

            # [Optional] he factor by which the initial back off is exponentially incremented
            backoffFactor: 2.0

        # [Optional] options for selection service
        selection:
          # [Optional] endorser selection sorting strategy. Possible values: [BlockHeightPriority,Balanced]
          SortingStrategy: BlockHeightPriority

          # [Optional] load-balancer type. Possible values: [RoundRobin,Random]
          Balancer: RoundRobin

          # [Optional] the number of blocks from the highest block number of a group of peers that a peer
          # can lag behind and still be considered to be up-to-date. These peers will be sorted using the
          # given Balancer. If a peer's block height falls behind this threshold then it will be demoted
          # to a lower priority list of peers which will be sorted according to block height.
          # Note: This property only applies to BlockHeightPriority sorter.
          BlockHeightLagThreshold: 5

        # [Optional] options for event service
        eventService:
          # [Optional] resolverStrategy specifies the peer resolver strategy to use when connecting to a peer
          # Possible values: [PreferOrg (default), MinBlockHeight, Balanced]
          #
          # PreferOrg:
          #   Determines which peers are suitable based on block height lag threshold, although will prefer the peers in the
          #   current org (as long as their block height is above a configured threshold). If none of the peers from the current org
          #   are suitable then a peer from another org is chosen.
          # MinBlockHeight:
          #   Chooses the best peer according to a block height lag threshold. The maximum block height of all peers is
          #   determined and the peers whose block heights are under the maximum height but above a provided "lag" threshold are load
          #   balanced. The other peers are not considered.
          # Balanced:
          #   Chooses peers using the configured balancer.
          resolverStrategy: PreferOrg

          # [Optional] minBlockHeightResolverMode specifies the behaviour of the MinBlockHeight resolver strategy.
          # Note that this parameter is applicable only when resolverStrategy is set to MinBlockHeight or PreferOrg.
          # Possible values: [ResolveByThreshold (default), ResolveLatest]
          #
          # ResolveByThreshold:
          #   Chooses peers based on block height lag threshold.
          # ResolveLatest:
          #   Chooses only the peers with the most up-to-date block height.
          minBlockHeightResolverMode: ResolveByThreshold

          # [Optional] balancer is the balancer to use when choosing a peer to connect to
          # Possible values: [Random (default), RoundRobin]
          balancer: Random

          # [Optional] blockHeightLagThreshold sets the block height lag threshold. This value is used for choosing a peer
          # to connect to. If a peer is lagging behind the most up-to-date peer by more than the given number of
          # blocks then it will be excluded from selection.
          # Note that this parameter is applicable only when minBlockHeightResolverMode is set to ResolveByThreshold.
          # Default: 5
          blockHeightLagThreshold: 5

          # [Optional] reconnectBlockHeightLagThreshold - the event client will disconnect from the peer if the peer's
          # block height falls behind the specified number of blocks and will reconnect to a better performing peer.
          # Note that this parameter is only applicable if peerMonitor is set to Enabled (default).
          # Default: 10
          # NOTES:
          #   - peerMonitorPeriod must be >0 to enable this feature
          #   - Setting this value too low may cause the event client to disconnect/reconnect too frequently, thereby
          #     affecting performance.
          reconnectBlockHeightLagThreshold: 10

          # [Optional] peerMonitor indicates whether or not a peer monitor should be enabled in order to monitor
          # the block height of the connected peer. In the case of MinBlockHeight and PreferOrg strategy, the event client
          # will disconnect from the peer if its block height falls below the specified threshold.
          # Possible values: [Enabled, Disabled]
          # Default: Enabled for MinBlockHeight and PreferOrg strategy; Disabled for Balanced strategy
          peerMonitor: Enabled

          # [Optional] peerMonitorPeriod is the period in which the connected peer is monitored to see if
          # the event client should disconnect from it and reconnect to another peer.
          # Default: 5s
          peerMonitorPeriod: 5s

#
# list of participating organizations in this network
#
organizations:
  org1:
    mspid: Org1MSP

    # Root of the MSP directories with keys and certs.
    cryptoPath: peerOrganizations/org1.example.com/users/{username}@org1.example.com/msp

    peers:
      - peer0.org1.example.com

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    # certificateAuthorities:
    #  - ca.org1.example.com

  orderer:
    mspid: OrdererMSP
    cryptoPath: ordererOrganizations/example.com/users/{username}@example.com/msp

#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  #  _default:
  # '_default' orderer can contain common configuration between all config
  # orderers to avoid repetitive config entries inside each orderer config element.

  orderer.example.com:
    url: localhost:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com

      # these are keep alive client parameters:
      # Make sure these parameters are set in coordination with the keepalive policy on the server,
      # as incompatible settings can result in closing of connection.
      # After a duration of this time if the client doesn't see any activity
      # it pings the server to see if the transport is still alive.
      # The current default value is infinity
      # keep-alive-time: 5s

      # After having pinged for keepalive check, the client waits for a duration of Timeout
      # and if no activity is seen even after that the connection is closed.
      # The current default value is 20 seconds
      # keep-alive-timeout: 6s

      # If true, client runs keepalive checks even with no active RPCs
      # keep-alive-permit: false

      # fail-fast is action to take when an RPC is attempted on broken connections or unreachable servers
      # fail-fast: true

      # will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      # allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /Users/facundotorraca/Documents/ticken/ticken-dev/test-pvtbc/test-network/organizations/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  #  _default:
  # '_default' peer can contain common configuration between all config
  # peers to avoid repetitive config entries inside each peer config element.

  peer0.org1.example.com:
    # this URL is used to send endorsement and query requests
    url: localhost:7051

    grpcOptions:
      ssl-target-name-override: peer0.org1.example.com

      # will be taken into consideration if address has no protocol defined, if true then grpc or else grpcs
      # allow-insecure: false

    tlsCACerts:
      # Certificate location absolute path
      path: /Users/facundotorraca/Documents/ticken/ticken-dev/test-pvtbc/test-network/organizations/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
